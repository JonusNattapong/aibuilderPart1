# -*- coding: utf-8 -*-
"""
Sample dataset for the Retail domain covering various NLP tasks.
Can also be run to generate retail_data.parquet in the DataOutput directory.
Requires pandas and pyarrow: pip install pandas pyarrow
"""
import os
import pandas as pd # Added import

# --- 1. Summarization ---
retail_summarization_data = [
    {
        "document": "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏Ç‡∏≤ XYZ ‡∏û‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏≠‡∏≤‡∏á‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ‡∏£‡∏≠‡∏á‡∏•‡∏á‡∏°‡∏≤‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô‡∏™‡∏ï‡∏£‡∏µ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ñ‡∏∑‡∏≠‡∏•‡∏¥‡∏õ‡∏™‡∏ï‡∏¥‡∏Å‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏£‡∏∏‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á‡∏¢‡∏µ‡∏ô‡∏™‡πå‡∏ó‡∏£‡∏á‡∏™‡∏Å‡∏¥‡∏ô‡∏ô‡∏µ‡πà ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏ã‡∏∑‡πâ‡∏≠ 1 ‡πÅ‡∏ñ‡∏° 1 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏î‡∏π‡πÅ‡∏•‡∏ú‡∏¥‡∏ß‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏Å ‡πÅ‡∏ï‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢",
        "summary": "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏™‡∏≤‡∏Ç‡∏≤ XYZ ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏≠‡∏≤‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡∏™‡∏ï‡∏£‡∏µ ‡∏•‡∏¥‡∏õ‡∏™‡∏ï‡∏¥‡∏Å‡πÅ‡∏î‡∏á‡πÅ‡∏•‡∏∞‡∏¢‡∏µ‡∏ô‡∏™‡πå‡∏™‡∏Å‡∏¥‡∏ô‡∏ô‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡∏™‡∏∏‡∏î ‡πÇ‡∏õ‡∏£‡∏Ø ‡∏™‡∏Å‡∏¥‡∏ô‡πÅ‡∏Ñ‡∏£‡πå 1 ‡πÅ‡∏ñ‡∏° 1 ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à ‡πÅ‡∏ï‡πà‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πâ‡∏≤"
    },
    # ... more summarization examples
]

# --- 2. Open QA ---
retail_open_qa_data = [
    {
        "context": "‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô ABC ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 14 ‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠ ‡πÇ‡∏î‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏†‡∏≤‡∏û‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡πâ‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ä‡∏∏‡∏î‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ",
        "question": "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏î‡∏ö‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô ABC?",
        "answer": "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ä‡∏∏‡∏î‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ"
    },
    # ... more open QA examples
]

# --- 3. Close QA (Extractive) ---
retail_close_qa_data = [
    {
        "context": "‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å! ‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏£‡∏ö 1,000 ‡∏ö‡∏≤‡∏ó ‡∏£‡∏±‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ 100 ‡∏ö‡∏≤‡∏ó ‡πÅ‡∏•‡∏∞‡∏™‡∏∞‡∏™‡∏°‡πÅ‡∏ï‡πâ‡∏°‡∏Ñ‡∏π‡∏ì‡∏™‡∏≠‡∏á ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏∂‡∏á 30 ‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
        "question": "‡∏ï‡πâ‡∏≠‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏£‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà‡∏à‡∏∂‡∏á‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î 100 ‡∏ö‡∏≤‡∏ó?",
        "answer_text": "1,000 ‡∏ö‡∏≤‡∏ó"
    },
    # ... more close QA examples
]

# --- 4. Classification ---
# Example labels: product_inquiry, order_status, complaint, promotion_query
retail_classification_data = [
    {"text": "‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡∏£‡∏∏‡πà‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏™‡∏µ‡∏î‡∏≥‡πÑ‡∏ã‡∏™‡πå 40 ‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞", "label": "product_inquiry"},
    {"text": "‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÑ‡∏õ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô ‡∏≠‡∏¢‡∏≤‡∏Å‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á", "label": "order_status"},
    {"text": "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ú‡∏¥‡∏î‡∏Ç‡∏ô‡∏≤‡∏î ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡∏∑‡∏ô", "label": "complaint"},
    {"text": "‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡∏°‡∏µ‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡πÑ‡∏´‡∏ô", "label": "promotion_query"},
    # ... more classification examples
]

# --- 5. Creative Writing ---
retail_creative_writing_data = [
    {
        "prompt": "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏¢‡∏∑‡∏î‡∏Ñ‡∏≠‡∏•‡πÄ‡∏•‡∏Ñ‡∏ä‡∏±‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏°‡∏¥‡∏ô‡∏¥‡∏°‡∏≠‡∏•",
        "generated_text": "‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏™‡πÑ‡∏ï‡∏•‡πå ‡∏Å‡∏±‡∏ö‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏¢‡∏∑‡∏î‡∏Ñ‡∏≠‡∏•‡πÄ‡∏•‡∏Ñ‡∏ä‡∏±‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡∏Ñ‡∏≠‡∏ï‡∏ï‡∏≠‡∏ô 100% ‡∏ô‡∏∏‡πà‡∏°‡∏™‡∏ö‡∏≤‡∏¢ ‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏° ‡∏î‡∏µ‡πÑ‡∏ã‡∏ô‡πå‡∏°‡∏¥‡∏ô‡∏¥‡∏°‡∏≠‡∏• ‡πÅ‡∏°‡∏ó‡∏ä‡πå‡∏á‡πà‡∏≤‡∏¢‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏•‡∏∏‡∏Ñ ‡πÉ‡∏™‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ö‡∏∑‡πà‡∏≠"
    },
    {
        "prompt": "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ó‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Å‡∏•‡∏≤‡∏á‡∏õ‡∏µ‡∏ö‡∏ô‡πÇ‡∏ã‡πÄ‡∏ä‡∏µ‡∏¢‡∏•‡∏°‡∏µ‡πÄ‡∏î‡∏µ‡∏¢",
        "generated_text": "üî• Mid Year Sale ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß! ‡∏•‡∏î‡∏Å‡∏£‡∏∞‡∏´‡∏ô‡πà‡∏≥‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 70% üî• ‡∏Ç‡∏ô‡∏ó‡∏±‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡∏î‡∏±‡∏á‡∏°‡∏≤‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏© ‡∏ä‡πâ‡∏≠‡∏õ‡∏à‡∏∏‡πÉ‡∏à‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ - 31 ‡∏Å.‡∏Ñ. ‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô! ‡∏£‡∏µ‡∏ö‡πÄ‡∏•‡∏¢‡∏Å‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏î! #MidYearSale #‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤ #‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô"
    },
    # ... more creative writing examples
]

# --- 6. Brainstorming ---
retail_brainstorming_data = [
    {
        "topic": "‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏à‡∏±‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡πà‡∏á‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå",
        "ideas": [
            "‡∏à‡∏±‡∏î‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ò‡∏µ‡∏°‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå‡∏£‡∏±‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©",
            "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏£‡∏á‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏∞‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô",
            "‡πÅ‡∏à‡∏Å‡∏ã‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ô‡πâ‡∏≥‡∏•‡∏≤‡∏¢‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î",
            "‡∏à‡∏±‡∏î‡∏°‡∏∏‡∏°‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏ò‡∏µ‡∏°‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå",
            "‡∏õ‡∏£‡∏∞‡∏Å‡∏ß‡∏î‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏¢‡∏ä‡∏∏‡∏î‡πÑ‡∏ó‡∏¢‡∏°‡∏≤‡∏£‡∏±‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î"
        ]
    },
    # ... more brainstorming examples
]

# --- 7. Multiple Choice QA ---
retail_mcq_data = [
    {
        "context": "‡∏£‡πâ‡∏≤‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≠‡∏î 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏∏‡∏õ‡πÇ‡∏†‡∏Ñ‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏î‡πâ‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤",
        "question": "‡∏£‡πâ‡∏≤‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡πÉ‡∏î‡∏ö‡πâ‡∏≤‡∏á?",
        "choices": ["‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå", "‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏ô‡∏±‡∏Å‡∏Ç‡∏±‡∏ï‡∏§‡∏Å‡∏©‡πå", "‡∏ß‡∏±‡∏ô‡∏õ‡∏µ‡πÉ‡∏´‡∏°‡πà", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î"],
        "answer_index": 3 # Index of "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î"
    },
    # ... more multiple choice QA examples
]

# Combine all data
retail_domain_data = {
    "summarization": retail_summarization_data,
    "open_qa": retail_open_qa_data,
    "close_qa": retail_close_qa_data,
    "classification": retail_classification_data,
    "creative_writing": retail_creative_writing_data,
    "brainstorming": retail_brainstorming_data,
    "multiple_choice_qa": retail_mcq_data,
}

# Function to preprocess data into a standard format for Parquet (copied for simplicity)
def preprocess_data_for_parquet(domain_name, task_name, data_list):
    processed = []
    for item in data_list:
        input_text = ""
        target_text = ""
        prefix = f"{domain_name} {task_name}: "

        if task_name == "summarization":
            input_text = prefix + item.get("document", "")
            target_text = item.get("summary", "")
        elif task_name == "open_qa":
            input_text = prefix + f"question: {item.get('question', '')} context: {item.get('context', '')}"
            target_text = item.get("answer", "")
        elif task_name == "close_qa":
            input_text = prefix + f"question: {item.get('question', '')} context: {item.get('context', '')}"
            target_text = item.get("answer_text", "")
        elif task_name == "classification":
            input_text = prefix + item.get("text", "")
            target_text = item.get("label", "")
        elif task_name == "creative_writing":
            input_text = prefix + item.get("prompt", "")
            target_text = item.get("generated_text", "")
        elif task_name == "brainstorming":
            input_text = prefix + item.get("topic", "")
            target_text = "\n".join(item.get("ideas", []))
        elif task_name == "multiple_choice_qa":
            choices_str = " | ".join(item.get("choices", []))
            input_text = prefix + f"question: {item.get('question', '')} choices: {choices_str} context: {item.get('context', '')}"
            answer_idx = item.get("answer_index")
            if answer_idx is not None and item.get("choices"):
                target_text = item["choices"][answer_idx]

        if input_text and target_text:
            processed.append({
                "domain": domain_name,
                "task": task_name,
                "input_text": input_text,
                "target_text": target_text
            })
    return processed


if __name__ == '__main__':
    print("--- Retail Domain Dataset Samples ---")
    print(f"\nSummarization Example:\n{retail_domain_data['summarization'][0]}")
    print(f"\nOpen QA Example:\n{retail_domain_data['open_qa'][0]}")
    print(f"\nClose QA Example:\n{retail_domain_data['close_qa'][0]}")
    print(f"\nClassification Example:\n{retail_domain_data['classification'][0]}")
    print(f"\nCreative Writing Example:\n{retail_domain_data['creative_writing'][0]}")
    print(f"\nBrainstorming Example:\n{retail_domain_data['brainstorming'][0]}")
    print(f"\nMultiple Choice QA Example:\n{retail_domain_data['multiple_choice_qa'][0]}")

    # --- Generate Parquet File ---
    print("\n--- Generating Parquet file ---")
    all_records = []
    domain_name = "retail"
    for task, data in retail_domain_data.items():
        all_records.extend(preprocess_data_for_parquet(domain_name, task, data))

    if all_records:
        df = pd.DataFrame(all_records)
        output_filename = "retail_data.parquet"
        # Define output directory relative to the script's location
        script_dir = os.path.dirname(__file__)
        output_dir = os.path.abspath(os.path.join(script_dir, '..', 'DataOutput')) # Go up one level, then into DataOutput
        # Create DataOutput directory if it doesn't exist
        os.makedirs(output_dir, exist_ok=True)
        output_path = os.path.join(output_dir, output_filename)
        try:
            df.to_parquet(output_path, index=False)
            print(f"Successfully generated {output_filename} at {output_path}")
            print(f"DataFrame Info:\n{df.info()}")
            print(f"\nFirst 5 rows:\n{df.head().to_string()}")
        except Exception as e:
            print(f"Error saving Parquet file: {e}")
            print("Please ensure 'pandas' and 'pyarrow' are installed (`pip install pandas pyarrow`)")
    else:
        print("No records processed, Parquet file not generated.")
